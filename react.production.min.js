/**
 * @license React
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
(function() {
    'use strict';
    (function(global, factory) {
        if (typeof exports === 'object' && typeof module !== 'undefined') {
            factory(exports); // CommonJS 模块导出
        } else if (typeof define === 'function' && define.amd) {
            define(['exports'], factory); // AMD 模块导出
        } else {
            global = global || self;
            factory(global.React = {}); // 浏览器环境导出
        }
    })(this, function(exports) {

        var ReactVersion = '18.2.0';

        // React 元素标识符
        var REACT_ELEMENT_TYPE = Symbol.for('react.element');
        var REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');
        var REACT_PURE_COMPONENT_TYPE = Symbol.for('react.pure_component');

        // React Component 基类
        function Component(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = {};
            this.updater = updater || defaultUpdater;
        }

        Component.prototype.setState = function(partialState, callback) {
            if (typeof partialState !== 'object' && typeof partialState !== 'function' && partialState != null) {
                throw new Error('setState(...) 需要一个对象或函数来更新状态。');
            }
            this.updater.enqueueSetState(this, partialState, callback, 'setState');
        };

        Component.prototype.forceUpdate = function(callback) {
            this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
        };

        // PureComponent 类
        function PureComponent(props, context, updater) {
            Component.call(this, props, context, updater);
        }

        PureComponent.prototype = Object.create(Component.prototype);
        PureComponent.prototype.constructor = PureComponent;
        PureComponent.prototype.isPureReactComponent = true;

        // createElement 函数
        function createElement(type, config, children) {
            var props = {};
            var key = null;
            var ref = null;

            if (config != null) {
                if (config.key !== undefined) {
                    key = '' + config.key;
                }
                if (config.ref !== undefined) {
                    ref = config.ref;
                }
                for (var propName in config) {
                    if (hasOwnProperty.call(config, propName) && !reservedProps.hasOwnProperty(propName)) {
                        props[propName] = config[propName];
                    }
                }
            }

            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
                props.children = children;
            } else if (childrenLength > 1) {
                var childArray = Array(childrenLength);
                for (var i = 0; i < childrenLength; i++) {
                    childArray[i] = arguments[i + 2];
                }
                props.children = childArray;
            }

            return {
                $$typeof: REACT_ELEMENT_TYPE,
                type: type,
                key: key,
                ref: ref,
                props: props,
                _owner: null
            };
        }

        // createRef 函数
        function createRef() {
            return { current: null };
        }

        // Hooks API
        function useState(initialState) {
            var dispatcher = ReactCurrentDispatcher.current;
            return dispatcher.useState(initialState);
        }

        function useEffect(effect, deps) {
            var dispatcher = ReactCurrentDispatcher.current;
            return dispatcher.useEffect(effect, deps);
        }

        // 基础导出
        exports.Component = Component;
        exports.PureComponent = PureComponent;
        exports.Fragment = REACT_FRAGMENT_TYPE;
        exports.createElement = createElement;
        exports.createRef = createRef;
        exports.useState = useState;
        exports.useEffect = useEffect;
        exports.version = ReactVersion;

    });
})();
